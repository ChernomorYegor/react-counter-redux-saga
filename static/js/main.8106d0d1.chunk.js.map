{"version":3,"sources":["App.js","containers/App.js","serviceWorker.js","reducers/counter.js","reducers/index.js","services/counterService.js","sagas/counterSaga.js","index.js"],"names":["App","counters","decrement","increment","fetchCounters","fetchCounterErrorMessage","setCounter","setCounterErrorMessage","_increment","id","_decrement","useEffect","alert","className","map","counter","key","type","disabled","onClick","bind","value","connect","state","dispatch","payload","Boolean","window","location","hostname","match","initialState","savedCounter","counterReducer","action","update","$merge","items","fetchArticleErrorMessage","message","fromStateDecr","slice","fromStateIncr","setItemErrorMessage","combineReducers","BASE_URL","fetch","result","json","method","headers","body","JSON","stringify","fetchCountersSaga","setCounterSaga","counterSaga","call","counterService","getItems","put","select","setItem","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","logger","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8106d0d1.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App({counters, decrement, increment, fetchCounters, fetchCounterErrorMessage, setCounter, setCounterErrorMessage}) {\n    useEffect(() => {\n        fetchCounters();\n    }, []);\n\n    useEffect(() => {\n        if (fetchCounterErrorMessage) {\n            alert(fetchCounterErrorMessage);\n        }\n    }, [fetchCounterErrorMessage]);\n\n    useEffect(() => {\n        if (setCounterErrorMessage) {\n            alert(setCounterErrorMessage);\n        }\n    }, [setCounterErrorMessage]);\n\n    function _increment(id) {\n        increment(id);\n        setCounter(id);\n    }\n\n    function _decrement(id) {\n        decrement(id);\n        setCounter(id);\n    }\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"mt-2 mb-4 text-center\">Counter (react+redux+saga)</h1>\n            {\n                counters.map(({id, counter}) => (\n                    <div className=\"w-25 m-auto\" key={id}>\n                        <div className=\"h2 mt-4 text-center\">{counter}</div>\n                        <div className=\"d-flex justify-content-between\">\n                            <button type=\"button\" className=\"btn btn-primary\" disabled={(counter === 0) && \"disabled\"} onClick={_decrement.bind(null, id)}>Decrease</button>\n                            <button type=\"button\" value={id} className=\"btn btn-danger\" onClick={_increment.bind(null, id)}>Increase</button>\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nApp.propTypes = {\n    counters: PropTypes.arrayOf(PropTypes.object).isRequired,\n    decrement: PropTypes.func.isRequired,\n    increment: PropTypes.func.isRequired,\n    fetchCounters: PropTypes.func.isRequired,\n    fetchCounterErrorMessage: PropTypes.string,\n    setCounter: PropTypes.func.isRequired,\n    setCounterErrorMessage: PropTypes.string,\n};\n\nexport default App;","import {connect} from 'react-redux';\n\nimport App from \"../App\";\n\nconst mapStateToProps = state => {\n    return {\n        counters: state.counter.counters,\n        fetchCounterErrorMessage: state.counter.fetchCounterErrorMessage,\n        setCounterErrorMessage: state.counter.setCounterErrorMessage,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        decrement: (id) => dispatch({\n            type: 'COUNTER/DECREMENT',\n            payload: id - 1,\n        }),\n        increment: (id) => dispatch({\n            type: 'COUNTER/INCREMENT',\n            payload: id - 1,\n        }),\n        fetchCounters: () => dispatch({\n            type: 'COUNTER/FETCH',\n        }),\n        setCounter: (id) => dispatch({\n            type: 'COUNTER/SET_COUNTERS',\n            payload: id,\n        }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import update from 'immutability-helper';\n\nconst initialState = {\n    counters: [],\n    fetchCounterErrorMessage: '',\n    savedCounter: {},\n    setCounterErrorMessage: '',\n};\n\nfunction counterReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'COUNTER/FETCH_SUCCESSFULLY':\n            return update(state, {\n                $merge: {\n                    counters: action.payload.items,\n                }\n            });\n        case 'COUNTER/FETCH_ERROR':\n            return update(state, {\n                $merge: {\n                    fetchArticleErrorMessage: action.payload.message,\n                }\n            });\n\n        case 'COUNTER/DECREMENT':\n            const fromStateDecr = state.counters.slice();\n            if (fromStateDecr[action.payload].counter <= 1) {\n                fromStateDecr[action.payload].counter = 0;\n            } else {\n                fromStateDecr[action.payload].counter = state.counters[action.payload].counter - 1;\n            }\n\n            return update(state, {\n                $merge: {\n                    counters: fromStateDecr,\n                }\n            });\n        case 'COUNTER/INCREMENT':\n            const fromStateIncr = state.counters.slice();\n            fromStateIncr[action.payload].counter = state.counters[action.payload].counter + 1;\n\n            return update(state, {\n                $merge: {\n                    counters: fromStateIncr,\n                }\n            });\n        case 'COUNTER/SET_COUNTER_SUCCESSFULLY':\n            return update(state, {\n                $merge: {\n                    savedCounter: action.payload.counter,\n                }\n            });\n        case 'COUNTER/SET_COUNTER_ERROR':\n            return update(state, {\n                $merge: {\n                    setItemErrorMessage: action.payload.message,\n                }\n            });\n        default:\n            return state\n    }\n}\n\nexport default counterReducer;","import { combineReducers } from 'redux'\n\nimport counter from './counter';\n\nexport default combineReducers({ counter });","const BASE_URL = 'https://github.com/ChernomorYegor/react-counter-redux-saga/blob/master/src/db/db.json';\n\nclass CounterService {\n    async getItems() {\n        const result = await fetch(`${BASE_URL}/counters`);\n\n        return await result.json();\n    }\n\n    async setItem(counter) {\n        const result = await fetch(`${BASE_URL}/counters/${counter.id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(counter)\n        });\n        return await result.json();\n    }\n}\n\nexport default new CounterService();","import {call, put, takeLatest, all, select} from 'redux-saga/effects';\n\nimport counterService from './../services/counterService';\n\nfunction* fetchCounters() {\n    try {\n        let items = yield call(counterService.getItems);\n\n        yield put({type: 'COUNTER/FETCH_SUCCESSFULLY', payload: {items}});\n    } catch ({message}) {\n        yield put({type: 'COUNTER/FETCH_ERROR', payload: {message}});\n    }\n}\n\nfunction* setCounter(action) {\n    try {\n        let counters = yield select(state => state.counter.counters);\n        let counter = yield call(counterService.setItem, counters[action.payload - 1]);\n\n        yield put({type: 'COUNTER/SET_COUNTER_SUCCESSFULLY', payload: {counter}});\n    } catch ({message}) {\n        yield put({type: 'COUNTER/SET_COUNTER_ERROR', payload: {message}});\n    }\n}\n\nfunction* fetchCountersSaga() {\n    yield takeLatest('COUNTER/FETCH', fetchCounters);\n}\n\nfunction* setCounterSaga() {\n    yield takeLatest('COUNTER/SET_COUNTERS', setCounter);\n}\n\nexport default function* counterSaga() {\n    yield all([\n        fetchCountersSaga(),\n        setCounterSaga(),\n    ]);\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducers';\nimport {Provider} from 'react-redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport counterSaga from './sagas/counterSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, applyMiddleware(logger, sagaMiddleware));\n\nsagaMiddleware.run(counterSaga);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}